{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    scoreMax = 0;\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = []){\n        this.board = initialState ? [\n            ...this._getBlankBoard()\n        ] : initialState;\n        this.scoreCurrent = 0;\n        this.gameStatus = \"idle\";\n    }\n    /**\n   * Generate blank board\n   * @returns blank board array\n   */ _getBlankBoard() {\n        return Array.from({\n            length: 4\n        }, ()=>Array.from({\n                length: 4\n            }, ()=>0));\n    }\n    /**\n   * Innitiate game\n   */ _initialize() {\n        this.board = [\n            ...this._getBlankBoard()\n        ];\n        this._genRandCells();\n        this._genRandCells();\n    }\n    _clearBoard() {\n        this.board = this._getBlankBoard();\n    }\n    /**\n   * Generate 2 random tiles and populates the board\n   * @returns {undefined}\n   */ _genRandCells() {\n        const randTile = this._generateRandomTile(this.board);\n        if (!randTile) return;\n        this.board[randTile[0]][randTile[1]] = randTile[2];\n    }\n    /**\n   * Function generate random row and colum which is currently unpopulated\n   * Also return random number 2 or 4 with 4 (10% probability)\n   * @param {number[][]} boardArrs\n   * @returns [random row, random colum, random number]\n   */ _generateRandomTile(boardArrs) {\n        let randRow;\n        let randCol;\n        // Run this random generator until row and\n        // collum position in given board are zero(vacant)\n        do {\n            randRow = Math.floor(Math.random() * boardArrs.length);\n            randCol = Math.floor(Math.random() * boardArrs[0].length);\n        }while (boardArrs[randRow][randCol] !== 0);\n        // Add 2 or 4 with 4 10% probability\n        let randValue = 2;\n        if (Math.floor(Math.random() * 100 + 1) <= 10) randValue = 4;\n        return [\n            randRow,\n            randCol,\n            randValue\n        ];\n    }\n    /**\n   * Check if can continue to play\n   * @returns true or false\n   * true- can continue the game\n   * false - stop the game (no moves, win or lose)\n   */ _checkGameStatus() {\n        // Check if winning score reached\n        if (this.board.some((row)=>row.some((cell)=>cell === 2048))) {\n            this.gameStatus = \"win\";\n            return false;\n        }\n        // Check if less then 2 evaliable tiles exist on the board\n        const freeTiles = this.board.reduce((acc, cur)=>acc + cur.filter((cell)=>cell === 0).length, 0);\n        if (this._anyMovesLeft() === false && freeTiles === 0) {\n            this.gameStatus = \"lose\";\n            return false;\n        }\n        this.gameStatus = \"playing\";\n        return true;\n    }\n    _didTileMoved(newArr, oldArr) {\n        // Check if newArr same as board\n        for(let row = 0; row < oldArr.length; row++)for(let col = 0; col < oldArr[row].length; col++){\n            if (oldArr[row][col] !== newArr[row][col]) return true;\n        }\n        return false;\n    }\n    _anyMovesLeft() {\n        const posMoves = [\n            this._combineTiles(\"ArrowLeft\", this.board)[\"score\"],\n            this._combineTiles(\"ArrowRight\", this.board)[\"score\"],\n            this._combineTiles(\"ArrowUp\", this.board)[\"score\"],\n            this._combineTiles(\"ArrowDown\", this.board)[\"score\"]\n        ];\n        return posMoves.some((m)=>m !== 0);\n    }\n    moves(direction) {\n        if (this.getStatus() === \"playing\") {\n            const beforeMoveBoard = this._arrayDeepCopy(this.board);\n            const combBoard = this._combineTiles(direction, this.board);\n            this.board = this._arrayDeepCopy(combBoard[\"board\"]);\n            this.scoreCurrent += combBoard[\"score\"];\n            this._updateMaxScore(this.scoreCurrent);\n            if (this._didTileMoved(beforeMoveBoard, this.board)) this._genRandCells();\n            this._checkGameStatus();\n        }\n    }\n    _shiftRight(arrN) {\n        const arr = [\n            ...arrN\n        ];\n        // Run for each row: filter-out Zeros appen zeroes from the left\n        for(let r = 0; r < arr.length; r++){\n            const temp = arr[r].filter((e)=>e);\n            arr[r] = Array.from({\n                length: arr[r].length - temp.length\n            }, ()=>0).concat(temp);\n        }\n        return arr;\n    }\n    _shiftLeft(arrN) {\n        const arr = [\n            ...arrN\n        ];\n        // Run for each row: filter-out Zeros appen zeroes from the right\n        for(let r = 0; r < arr.length; r++){\n            const temp = arr[r].filter((e)=>e);\n            arr[r] = temp.concat(Array.from({\n                length: arr[r].length - temp.length\n            }, ()=>0));\n        }\n        return arr;\n    }\n    _transpose(arr) {\n        const temp = [];\n        for(let cols = 0; cols < arr.length; cols++){\n            const tempCol = [];\n            for(let rows = 0; rows < arr[0].length; rows++)tempCol.push(arr[rows][cols]);\n            temp.push(tempCol);\n        }\n        return temp;\n    }\n    _combineTiles(direction, board) {\n        function combLeft() {\n            for(let row = 0; row < tempBoard.length; row++)for(let col = 0; col < tempBoard[row].length - 1; col++){\n                const el = tempBoard[row][col];\n                const elRight = tempBoard[row][col + 1];\n                if (el && elRight && el === elRight) {\n                    tempBoard[row][col] = el + elRight;\n                    tempBoard[row][col + 1] = 0;\n                    col++;\n                    tempScore = el + elRight;\n                }\n            }\n        }\n        function combRight() {\n            for(let row = tempBoard.length - 1; row >= 0; row--)for(let col = tempBoard[row].length - 1; col >= 1; col--){\n                const el = tempBoard[row][col];\n                const elLeft = tempBoard[row][col - 1];\n                if (el && elLeft && el === elLeft) {\n                    tempBoard[row][col] = el + elLeft;\n                    tempBoard[row][col - 1] = 0;\n                    col--;\n                    tempScore = el + elLeft;\n                }\n            }\n        }\n        let tempBoard = this._arrayDeepCopy(board);\n        let tempScore = 0;\n        switch(direction){\n            case \"ArrowLeft\":\n                tempBoard = this._shiftLeft(tempBoard);\n                combLeft();\n                tempBoard = this._shiftLeft(tempBoard);\n                break;\n            case \"ArrowRight\":\n                tempBoard = this._shiftRight(tempBoard);\n                combRight();\n                tempBoard = this._shiftRight(tempBoard);\n                break;\n            case \"ArrowUp\":\n                tempBoard = this._transpose(tempBoard);\n                tempBoard = this._shiftLeft(tempBoard);\n                combLeft();\n                tempBoard = this._shiftLeft(tempBoard);\n                tempBoard = this._transpose(tempBoard);\n                break;\n            case \"ArrowDown\":\n                tempBoard = this._transpose(tempBoard);\n                tempBoard = this._shiftRight(tempBoard);\n                combLeft();\n                tempBoard = this._shiftRight(tempBoard);\n                tempBoard = this._transpose(tempBoard);\n                break;\n        }\n        return {\n            board: tempBoard,\n            score: tempScore\n        };\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.scoreCurrent;\n    }\n    getScoreMax() {\n        return this.scoreMax;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.gameStatus;\n    }\n    getBoard() {\n        return this.board;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.gameStatus = \"playing\";\n        this._initialize();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.scoreCurrent = 0;\n        this.gameStatus = \"idle\";\n        this._clearBoard();\n    }\n    _arrayDeepCopy(obj) {\n        if (typeof obj !== \"object\" || obj === null) return obj;\n        if (obj instanceof Date) return new Date(obj.getTime());\n        if (obj instanceof Array) return obj.reduce((arr, item, i)=>{\n            arr[i] = this._arrayDeepCopy(item);\n            return arr;\n        }, []);\n        if (obj instanceof Object) return Object.keys(obj).reduce((newObj, key)=>{\n            newObj[key] = this._arrayDeepCopy(obj[key]);\n            return newObj;\n        }, {});\n    }\n    _updateMaxScore(curScore) {\n        if (this.scoreMax < curScore) this.scoreMax = curScore;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$boardEl = document.querySelector(\".game-field > tbody\");\nconst $09e991522ca7e64e$var$startBt = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$scoreCur = document.querySelector(\".curScore\");\nconst $09e991522ca7e64e$var$scoreMax = document.querySelector(\".maxScore\");\nconst $09e991522ca7e64e$var$msgStartEl = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$msgWinEl = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$msgLoseEl = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nfunction $09e991522ca7e64e$var$update() {\n    const curBoard = $09e991522ca7e64e$var$game.getBoard();\n    for(let row = 0; row < curBoard.length; row++)for(let i = 0; i < curBoard[row].length; i++){\n        const cel = $09e991522ca7e64e$var$boardEl.rows[row].cells[i];\n        const val = curBoard[row][i];\n        if (val) {\n            cel.textContent = val;\n            cel.classList = \"field-cell\";\n            cel.classList.add(`field-cell--${val}`);\n        } else {\n            cel.textContent = \"\";\n            cel.classList = \"field-cell\";\n        }\n    }\n    $09e991522ca7e64e$var$scoreMax.textContent = String($09e991522ca7e64e$var$game.getScoreMax());\n    $09e991522ca7e64e$var$scoreCur.textContent = String($09e991522ca7e64e$var$game.getScore());\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$startBt.className = \"button start\";\n        $09e991522ca7e64e$var$startBt.textContent = \"Start\";\n    } else {\n        $09e991522ca7e64e$var$startBt.className = \"button restart\";\n        $09e991522ca7e64e$var$startBt.textContent = \"Restart\";\n    }\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case \"playing\":\n            [\n                $09e991522ca7e64e$var$msgStartEl,\n                $09e991522ca7e64e$var$msgWinEl,\n                $09e991522ca7e64e$var$msgLoseEl\n            ].forEach((msg)=>!msg?.classList.contains(\"hidden\") ? msg?.classList.add(\"hidden\") : \"\");\n            break;\n        case \"idle\":\n            $09e991522ca7e64e$var$msgStartEl?.classList.remove(\"hidden\");\n            break;\n        case \"win\":\n            $09e991522ca7e64e$var$msgWinEl?.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$msgLoseEl?.classList.remove(\"hidden\");\n            break;\n    }\n}\ndocument.addEventListener(\"keydown\", (ev)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") $09e991522ca7e64e$var$game.moves(ev.key);\n    $09e991522ca7e64e$var$update();\n});\n$09e991522ca7e64e$var$startBt?.addEventListener(\"click\", (ev)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") $09e991522ca7e64e$var$game.start();\n    else $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$update();\n});\n\n\n//# sourceMappingURL=index.46cdf737.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst boardEl = document.querySelector('.game-field > tbody');\nconst startBt = document.querySelector('.start');\nconst scoreCur = document.querySelector('.curScore');\nconst scoreMax = document.querySelector('.maxScore');\nconst msgStartEl = document.querySelector('.message-start');\nconst msgWinEl = document.querySelector('.message-win');\nconst msgLoseEl = document.querySelector('.message-lose');\nconst game = new Game();\n\nfunction update() {\n  const curBoard = game.getBoard();\n\n  for (let row = 0; row < curBoard.length; row++) {\n    for (let i = 0; i < curBoard[row].length; i++) {\n      const cel = boardEl.rows[row].cells[i];\n      const val = curBoard[row][i];\n\n      if (val) {\n        cel.textContent = val;\n        cel.classList = 'field-cell';\n        cel.classList.add(`field-cell--${val}`);\n      } else {\n        cel.textContent = '';\n        cel.classList = 'field-cell';\n      }\n    }\n  }\n\n  scoreMax.textContent = String(game.getScoreMax());\n  scoreCur.textContent = String(game.getScore());\n\n  if (game.getStatus() === 'idle') {\n    startBt.className = 'button start';\n    startBt.textContent = 'Start';\n  } else {\n    startBt.className = 'button restart';\n    startBt.textContent = 'Restart';\n  }\n\n  switch (game.getStatus()) {\n    case 'playing':\n      [msgStartEl, msgWinEl, msgLoseEl].forEach(\n        (msg) =>\n          !msg?.classList.contains('hidden')\n            ? msg?.classList.add('hidden')\n            : '',\n        // eslint-disable-next-line function-paren-newline\n      );\n      break;\n\n    case 'idle':\n      msgStartEl?.classList.remove('hidden');\n      break;\n\n    case 'win':\n      msgWinEl?.classList.remove('hidden');\n      break;\n\n    case 'lose':\n      msgLoseEl?.classList.remove('hidden');\n      break;\n  }\n}\n\ndocument.addEventListener('keydown', (ev) => {\n  if (game.getStatus() === 'playing') {\n    game.moves(ev.key);\n  }\n  update();\n});\n\nstartBt?.addEventListener('click', (ev) => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n  } else {\n    game.restart();\n  }\n\n  update();\n});\n","'use strict';\n\nclass Game {\n  scoreMax = 0;\n\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = []) {\n    this.board = initialState ? [...this._getBlankBoard()] : initialState;\n    this.scoreCurrent = 0;\n    this.gameStatus = 'idle';\n  }\n\n  /**\n   * Generate blank board\n   * @returns blank board array\n   */\n  _getBlankBoard() {\n    return Array.from(\n      { length: 4 },\n      () => Array.from({ length: 4 }, () => 0),\n      // eslint-disable-next-line function-paren-newline\n    );\n  }\n\n  /**\n   * Innitiate game\n   */\n  _initialize() {\n    this.board = [...this._getBlankBoard()];\n    this._genRandCells();\n    this._genRandCells();\n  }\n\n  _clearBoard() {\n    this.board = this._getBlankBoard();\n  }\n  /**\n   * Generate 2 random tiles and populates the board\n   * @returns {undefined}\n   */\n  _genRandCells() {\n    const randTile = this._generateRandomTile(this.board);\n\n    if (!randTile) {\n      return;\n    }\n    this.board[randTile[0]][randTile[1]] = randTile[2];\n  }\n\n  /**\n   * Function generate random row and colum which is currently unpopulated\n   * Also return random number 2 or 4 with 4 (10% probability)\n   * @param {number[][]} boardArrs\n   * @returns [random row, random colum, random number]\n   */\n  _generateRandomTile(boardArrs) {\n    let randRow;\n    let randCol;\n\n    // Run this random generator until row and\n    // collum position in given board are zero(vacant)\n    do {\n      randRow = Math.floor(Math.random() * boardArrs.length);\n      randCol = Math.floor(Math.random() * boardArrs[0].length);\n    } while (boardArrs[randRow][randCol] !== 0);\n\n    // Add 2 or 4 with 4 10% probability\n    let randValue = 2;\n\n    if (Math.floor(Math.random() * 100 + 1) <= 10) {\n      randValue = 4;\n    }\n\n    return [randRow, randCol, randValue];\n  }\n\n  /**\n   * Check if can continue to play\n   * @returns true or false\n   * true- can continue the game\n   * false - stop the game (no moves, win or lose)\n   */\n  _checkGameStatus() {\n    // Check if winning score reached\n    if (this.board.some((row) => row.some((cell) => cell === 2048))) {\n      this.gameStatus = 'win';\n\n      return false;\n    }\n\n    // Check if less then 2 evaliable tiles exist on the board\n    const freeTiles = this.board.reduce(\n      (acc, cur) => acc + cur.filter((cell) => cell === 0).length,\n      0,\n    );\n\n    if (this._anyMovesLeft() === false && freeTiles === 0) {\n      this.gameStatus = 'lose';\n\n      return false;\n    }\n    this.gameStatus = 'playing';\n\n    return true;\n  }\n\n  _didTileMoved(newArr, oldArr) {\n    // Check if newArr same as board\n    for (let row = 0; row < oldArr.length; row++) {\n      for (let col = 0; col < oldArr[row].length; col++) {\n        if (oldArr[row][col] !== newArr[row][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  _anyMovesLeft() {\n    const posMoves = [\n      this._combineTiles('ArrowLeft', this.board)['score'],\n      this._combineTiles('ArrowRight', this.board)['score'],\n      this._combineTiles('ArrowUp', this.board)['score'],\n      this._combineTiles('ArrowDown', this.board)['score'],\n    ];\n\n    return posMoves.some((m) => m !== 0);\n  }\n\n  moves(direction) {\n    if (this.getStatus() === 'playing') {\n      const beforeMoveBoard = this._arrayDeepCopy(this.board);\n      const combBoard = this._combineTiles(direction, this.board);\n\n      this.board = this._arrayDeepCopy(combBoard['board']);\n      this.scoreCurrent += combBoard['score'];\n      this._updateMaxScore(this.scoreCurrent);\n\n      if (this._didTileMoved(beforeMoveBoard, this.board)) {\n        this._genRandCells();\n      }\n      this._checkGameStatus();\n    }\n  }\n\n  _shiftRight(arrN) {\n    const arr = [...arrN];\n\n    // Run for each row: filter-out Zeros appen zeroes from the left\n    for (let r = 0; r < arr.length; r++) {\n      const temp = arr[r].filter((e) => e);\n\n      arr[r] = Array.from(\n        { length: arr[r].length - temp.length },\n        () => 0,\n      ).concat(temp);\n    }\n\n    return arr;\n  }\n\n  _shiftLeft(arrN) {\n    const arr = [...arrN];\n\n    // Run for each row: filter-out Zeros appen zeroes from the right\n    for (let r = 0; r < arr.length; r++) {\n      const temp = arr[r].filter((e) => e);\n\n      arr[r] = temp.concat(\n        Array.from({ length: arr[r].length - temp.length }, () => 0),\n      );\n    }\n\n    return arr;\n  }\n\n  _transpose(arr) {\n    const temp = [];\n\n    for (let cols = 0; cols < arr.length; cols++) {\n      const tempCol = [];\n\n      for (let rows = 0; rows < arr[0].length; rows++) {\n        tempCol.push(arr[rows][cols]);\n      }\n      temp.push(tempCol);\n    }\n\n    return temp;\n  }\n\n  _combineTiles(direction, board) {\n    function combLeft() {\n      for (let row = 0; row < tempBoard.length; row++) {\n        for (let col = 0; col < tempBoard[row].length - 1; col++) {\n          const el = tempBoard[row][col];\n          const elRight = tempBoard[row][col + 1];\n\n          if (el && elRight && el === elRight) {\n            tempBoard[row][col] = el + elRight;\n            tempBoard[row][col + 1] = 0;\n            col++;\n            tempScore = el + elRight;\n          }\n        }\n      }\n    }\n\n    function combRight() {\n      for (let row = tempBoard.length - 1; row >= 0; row--) {\n        for (let col = tempBoard[row].length - 1; col >= 1; col--) {\n          const el = tempBoard[row][col];\n          const elLeft = tempBoard[row][col - 1];\n\n          if (el && elLeft && el === elLeft) {\n            tempBoard[row][col] = el + elLeft;\n            tempBoard[row][col - 1] = 0;\n            col--;\n            tempScore = el + elLeft;\n          }\n        }\n      }\n    }\n\n    let tempBoard = this._arrayDeepCopy(board);\n    let tempScore = 0;\n\n    switch (direction) {\n      case 'ArrowLeft':\n        tempBoard = this._shiftLeft(tempBoard);\n        combLeft();\n        tempBoard = this._shiftLeft(tempBoard);\n        break;\n\n      case 'ArrowRight':\n        tempBoard = this._shiftRight(tempBoard);\n        combRight();\n        tempBoard = this._shiftRight(tempBoard);\n        break;\n\n      case 'ArrowUp':\n        tempBoard = this._transpose(tempBoard);\n        tempBoard = this._shiftLeft(tempBoard);\n        combLeft();\n        tempBoard = this._shiftLeft(tempBoard);\n        tempBoard = this._transpose(tempBoard);\n        break;\n\n      case 'ArrowDown':\n        tempBoard = this._transpose(tempBoard);\n        tempBoard = this._shiftRight(tempBoard);\n        combLeft();\n        tempBoard = this._shiftRight(tempBoard);\n        tempBoard = this._transpose(tempBoard);\n        break;\n    }\n\n    return { board: tempBoard, score: tempScore };\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.scoreCurrent;\n  }\n\n  getScoreMax() {\n    return this.scoreMax;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  getBoard() {\n    return this.board;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.gameStatus = 'playing';\n    this._initialize();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.scoreCurrent = 0;\n    this.gameStatus = 'idle';\n    this._clearBoard();\n  }\n\n  _arrayDeepCopy(obj) {\n    if (typeof obj !== 'object' || obj === null) {\n      return obj;\n    }\n\n    if (obj instanceof Date) {\n      return new Date(obj.getTime());\n    }\n\n    if (obj instanceof Array) {\n      return obj.reduce((arr, item, i) => {\n        arr[i] = this._arrayDeepCopy(item);\n\n        return arr;\n      }, []);\n    }\n\n    if (obj instanceof Object) {\n      return Object.keys(obj).reduce((newObj, key) => {\n        newObj[key] = this._arrayDeepCopy(obj[key]);\n\n        return newObj;\n      }, {});\n    }\n  }\n\n  _updateMaxScore(curScore) {\n    if (this.scoreMax < curScore) {\n      this.scoreMax = curScore;\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","scoreMax","constructor","initialState","board","_getBlankBoard","scoreCurrent","gameStatus","Array","from","length","_initialize","_genRandCells","_clearBoard","randTile","_generateRandomTile","boardArrs","randRow","randCol","Math","floor","random","randValue","_checkGameStatus","some","row","cell","freeTiles","reduce","acc","cur","filter","_anyMovesLeft","_didTileMoved","newArr","oldArr","col","posMoves","_combineTiles","m","moves","direction","getStatus","beforeMoveBoard","_arrayDeepCopy","combBoard","_updateMaxScore","_shiftRight","arrN","arr","r","temp","e","concat","_shiftLeft","_transpose","cols","tempCol","rows","push","combLeft","tempBoard","el","elRight","tempScore","combRight","elLeft","score","getScore","getScoreMax","getBoard","start","restart","obj","Date","getTime","item","i","Object","keys","newObj","key","curScore","$09e991522ca7e64e$var$boardEl","document","querySelector","$09e991522ca7e64e$var$startBt","$09e991522ca7e64e$var$scoreCur","$09e991522ca7e64e$var$scoreMax","$09e991522ca7e64e$var$msgStartEl","$09e991522ca7e64e$var$msgWinEl","$09e991522ca7e64e$var$msgLoseEl","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$update","curBoard","cel","cells","val","textContent","classList","add","String","className","forEach","msg","contains","remove","addEventListener","ev"],"version":3,"file":"index.46cdf737.js.map"}