{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        (0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)(this, \"scoreMax\", 0);\n        this.board = initialState ? (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(this._getBlankBoard()) : initialState;\n        this.scoreCurrent = 0;\n        this.gameStatus = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            /**\n   * Generate blank board\n   * @returns blank board array\n   */ key: \"_getBlankBoard\",\n            value: function _getBlankBoard() {\n                return Array.from({\n                    length: 4\n                }, function() {\n                    return Array.from({\n                        length: 4\n                    }, function() {\n                        return 0;\n                    });\n                });\n            }\n        },\n        {\n            /**\n   * Innitiate game\n   */ key: \"_initialize\",\n            value: function _initialize() {\n                this.board = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(this._getBlankBoard());\n                this._genRandCells();\n                this._genRandCells();\n            }\n        },\n        {\n            key: \"_clearBoard\",\n            value: function _clearBoard() {\n                this.board = this._getBlankBoard();\n            }\n        },\n        {\n            /**\n   * Generate 2 random tiles and populates the board\n   * @returns {undefined}\n   */ key: \"_genRandCells\",\n            value: function _genRandCells() {\n                var randTile = this._generateRandomTile(this.board);\n                if (!randTile) return;\n                this.board[randTile[0]][randTile[1]] = randTile[2];\n            }\n        },\n        {\n            /**\n   * Function generate random row and colum which is currently unpopulated\n   * Also return random number 2 or 4 with 4 (10% probability)\n   * @param {number[][]} boardArrs\n   * @returns [random row, random colum, random number]\n   */ key: \"_generateRandomTile\",\n            value: function _generateRandomTile(boardArrs) {\n                var randRow;\n                var randCol;\n                // Run this random generator until row and\n                // collum position in given board are zero(vacant)\n                do {\n                    randRow = Math.floor(Math.random() * boardArrs.length);\n                    randCol = Math.floor(Math.random() * boardArrs[0].length);\n                }while (boardArrs[randRow][randCol] !== 0);\n                // Add 2 or 4 with 4 10% probability\n                var randValue = 2;\n                if (Math.floor(Math.random() * 100 + 1) <= 10) randValue = 4;\n                return [\n                    randRow,\n                    randCol,\n                    randValue\n                ];\n            }\n        },\n        {\n            /**\n   * Check if can continue to play\n   * @returns true or false\n   * true- can continue the game\n   * false - stop the game (no moves, win or lose)\n   */ key: \"_checkGameStatus\",\n            value: function _checkGameStatus() {\n                // Check if winning score reached\n                if (this.board.some(function(row) {\n                    return row.some(function(cell) {\n                        return cell === 2048;\n                    });\n                })) {\n                    this.gameStatus = \"win\";\n                    return false;\n                }\n                // Check if less then 2 evaliable tiles exist on the board\n                var freeTiles = this.board.reduce(function(acc, cur) {\n                    return acc + cur.filter(function(cell) {\n                        return cell === 0;\n                    }).length;\n                }, 0);\n                if (this._anyMovesLeft() === false && freeTiles === 0) {\n                    this.gameStatus = \"lose\";\n                    return false;\n                }\n                this.gameStatus = \"playing\";\n                return true;\n            }\n        },\n        {\n            key: \"_didTileMoved\",\n            value: function _didTileMoved(newArr, oldArr) {\n                // Check if newArr same as board\n                for(var row = 0; row < oldArr.length; row++)for(var col = 0; col < oldArr[row].length; col++){\n                    if (oldArr[row][col] !== newArr[row][col]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"_anyMovesLeft\",\n            value: function _anyMovesLeft() {\n                var posMoves = [\n                    this._combineTiles(\"ArrowLeft\", this.board)[\"score\"],\n                    this._combineTiles(\"ArrowRight\", this.board)[\"score\"],\n                    this._combineTiles(\"ArrowUp\", this.board)[\"score\"],\n                    this._combineTiles(\"ArrowDown\", this.board)[\"score\"]\n                ];\n                return posMoves.some(function(m) {\n                    return m !== 0;\n                });\n            }\n        },\n        {\n            key: \"moves\",\n            value: function moves(direction) {\n                if (this.getStatus() === \"playing\") {\n                    var beforeMoveBoard = this._arrayDeepCopy(this.board);\n                    var combBoard = this._combineTiles(direction, this.board);\n                    this.board = this._arrayDeepCopy(combBoard[\"board\"]);\n                    this.scoreCurrent += combBoard[\"score\"];\n                    this._updateMaxScore(this.scoreCurrent);\n                    if (this._didTileMoved(beforeMoveBoard, this.board)) this._genRandCells();\n                    this._checkGameStatus();\n                }\n            }\n        },\n        {\n            key: \"_shiftRight\",\n            value: function _shiftRight(arrN) {\n                var arr = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(arrN);\n                // Run for each row: filter-out Zeros appen zeroes from the left\n                for(var r = 0; r < arr.length; r++){\n                    var temp = arr[r].filter(function(e) {\n                        return e;\n                    });\n                    arr[r] = Array.from({\n                        length: arr[r].length - temp.length\n                    }, function() {\n                        return 0;\n                    }).concat(temp);\n                }\n                return arr;\n            }\n        },\n        {\n            key: \"_shiftLeft\",\n            value: function _shiftLeft(arrN) {\n                var arr = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(arrN);\n                // Run for each row: filter-out Zeros appen zeroes from the right\n                for(var r = 0; r < arr.length; r++){\n                    var temp = arr[r].filter(function(e) {\n                        return e;\n                    });\n                    arr[r] = temp.concat(Array.from({\n                        length: arr[r].length - temp.length\n                    }, function() {\n                        return 0;\n                    }));\n                }\n                return arr;\n            }\n        },\n        {\n            key: \"_transpose\",\n            value: function _transpose(arr) {\n                var temp = [];\n                for(var cols = 0; cols < arr.length; cols++){\n                    var tempCol = [];\n                    for(var rows = 0; rows < arr[0].length; rows++)tempCol.push(arr[rows][cols]);\n                    temp.push(tempCol);\n                }\n                return temp;\n            }\n        },\n        {\n            key: \"_combineTiles\",\n            value: function _combineTiles(direction, board) {\n                function combLeft() {\n                    for(var row = 0; row < tempBoard.length; row++)for(var col = 0; col < tempBoard[row].length - 1; col++){\n                        var el = tempBoard[row][col];\n                        var elRight = tempBoard[row][col + 1];\n                        if (el && elRight && el === elRight) {\n                            tempBoard[row][col] = el + elRight;\n                            tempBoard[row][col + 1] = 0;\n                            col++;\n                            tempScore = el + elRight;\n                        }\n                    }\n                }\n                function combRight() {\n                    for(var row = tempBoard.length - 1; row >= 0; row--)for(var col = tempBoard[row].length - 1; col >= 1; col--){\n                        var el = tempBoard[row][col];\n                        var elLeft = tempBoard[row][col - 1];\n                        if (el && elLeft && el === elLeft) {\n                            tempBoard[row][col] = el + elLeft;\n                            tempBoard[row][col - 1] = 0;\n                            col--;\n                            tempScore = el + elLeft;\n                        }\n                    }\n                }\n                var tempBoard = this._arrayDeepCopy(board);\n                var tempScore = 0;\n                switch(direction){\n                    case \"ArrowLeft\":\n                        tempBoard = this._shiftLeft(tempBoard);\n                        combLeft();\n                        tempBoard = this._shiftLeft(tempBoard);\n                        break;\n                    case \"ArrowRight\":\n                        tempBoard = this._shiftRight(tempBoard);\n                        combRight();\n                        tempBoard = this._shiftRight(tempBoard);\n                        break;\n                    case \"ArrowUp\":\n                        tempBoard = this._transpose(tempBoard);\n                        tempBoard = this._shiftLeft(tempBoard);\n                        combLeft();\n                        tempBoard = this._shiftLeft(tempBoard);\n                        tempBoard = this._transpose(tempBoard);\n                        break;\n                    case \"ArrowDown\":\n                        tempBoard = this._transpose(tempBoard);\n                        tempBoard = this._shiftRight(tempBoard);\n                        combLeft();\n                        tempBoard = this._shiftRight(tempBoard);\n                        tempBoard = this._transpose(tempBoard);\n                        break;\n                }\n                return {\n                    board: tempBoard,\n                    score: tempScore\n                };\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.scoreCurrent;\n            }\n        },\n        {\n            key: \"getScoreMax\",\n            value: function getScoreMax() {\n                return this.scoreMax;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.gameStatus;\n            }\n        },\n        {\n            key: \"getBoard\",\n            value: function getBoard() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.gameStatus = \"playing\";\n                this._initialize();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.scoreCurrent = 0;\n                this.gameStatus = \"idle\";\n                this._clearBoard();\n            }\n        },\n        {\n            key: \"_arrayDeepCopy\",\n            value: function _arrayDeepCopy(obj) {\n                var _this = this;\n                if (typeof obj !== \"object\" || obj === null) return obj;\n                if (obj instanceof Date) return new Date(obj.getTime());\n                if (obj instanceof Array) return obj.reduce(function(arr, item, i) {\n                    arr[i] = _this._arrayDeepCopy(item);\n                    return arr;\n                }, []);\n                if (obj instanceof Object) return Object.keys(obj).reduce(function(newObj, key) {\n                    newObj[key] = _this._arrayDeepCopy(obj[key]);\n                    return newObj;\n                }, {});\n            }\n        },\n        {\n            key: \"_updateMaxScore\",\n            value: function _updateMaxScore(curScore) {\n                if (this.scoreMax < curScore) this.scoreMax = curScore;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$boardEl = document.querySelector(\".game-field > tbody\");\nvar $197cd56b15c33885$var$startBt = document.querySelector(\".start\");\nvar $197cd56b15c33885$var$scoreCur = document.querySelector(\".curScore\");\nvar $197cd56b15c33885$var$scoreMax = document.querySelector(\".maxScore\");\nvar $197cd56b15c33885$var$msgStartEl = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$msgWinEl = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$msgLoseEl = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nfunction $197cd56b15c33885$var$update() {\n    var curBoard = $197cd56b15c33885$var$game.getBoard();\n    for(var row = 0; row < curBoard.length; row++)for(var i = 0; i < curBoard[row].length; i++){\n        var cel = $197cd56b15c33885$var$boardEl.rows[row].cells[i];\n        var val = curBoard[row][i];\n        if (val) {\n            cel.textContent = val;\n            cel.classList = \"field-cell\";\n            cel.classList.add(\"field-cell--\".concat(val));\n        } else {\n            cel.textContent = \"\";\n            cel.classList = \"field-cell\";\n        }\n    }\n    $197cd56b15c33885$var$scoreMax.textContent = String($197cd56b15c33885$var$game.getScoreMax());\n    $197cd56b15c33885$var$scoreCur.textContent = String($197cd56b15c33885$var$game.getScore());\n    if ($197cd56b15c33885$var$game.getStatus() === \"idle\") {\n        $197cd56b15c33885$var$startBt.className = \"button start\";\n        $197cd56b15c33885$var$startBt.textContent = \"Start\";\n    } else {\n        $197cd56b15c33885$var$startBt.className = \"button restart\";\n        $197cd56b15c33885$var$startBt.textContent = \"Restart\";\n    }\n    switch($197cd56b15c33885$var$game.getStatus()){\n        case \"playing\":\n            [\n                $197cd56b15c33885$var$msgStartEl,\n                $197cd56b15c33885$var$msgWinEl,\n                $197cd56b15c33885$var$msgLoseEl\n            ].forEach(function(msg) {\n                return !(msg === null || msg === void 0 ? void 0 : msg.classList.contains(\"hidden\")) ? msg === null || msg === void 0 ? void 0 : msg.classList.add(\"hidden\") : \"\";\n            });\n            break;\n        case \"idle\":\n            $197cd56b15c33885$var$msgStartEl === null || $197cd56b15c33885$var$msgStartEl === void 0 ? void 0 : $197cd56b15c33885$var$msgStartEl.classList.remove(\"hidden\");\n            break;\n        case \"win\":\n            $197cd56b15c33885$var$msgWinEl === null || $197cd56b15c33885$var$msgWinEl === void 0 ? void 0 : $197cd56b15c33885$var$msgWinEl.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            $197cd56b15c33885$var$msgLoseEl === null || $197cd56b15c33885$var$msgLoseEl === void 0 ? void 0 : $197cd56b15c33885$var$msgLoseEl.classList.remove(\"hidden\");\n            break;\n    }\n}\ndocument.addEventListener(\"keydown\", function(ev) {\n    if ($197cd56b15c33885$var$game.getStatus() === \"playing\") $197cd56b15c33885$var$game.moves(ev.key);\n    $197cd56b15c33885$var$update();\n});\n$197cd56b15c33885$var$startBt === null || $197cd56b15c33885$var$startBt === void 0 ? void 0 : $197cd56b15c33885$var$startBt.addEventListener(\"click\", function(ev) {\n    if ($197cd56b15c33885$var$game.getStatus() === \"idle\") $197cd56b15c33885$var$game.start();\n    else $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$update();\n});\n\n})();\n//# sourceMappingURL=index.8ff22563.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst boardEl = document.querySelector('.game-field > tbody');\nconst startBt = document.querySelector('.start');\nconst scoreCur = document.querySelector('.curScore');\nconst scoreMax = document.querySelector('.maxScore');\nconst msgStartEl = document.querySelector('.message-start');\nconst msgWinEl = document.querySelector('.message-win');\nconst msgLoseEl = document.querySelector('.message-lose');\nconst game = new Game();\n\nfunction update() {\n  const curBoard = game.getBoard();\n\n  for (let row = 0; row < curBoard.length; row++) {\n    for (let i = 0; i < curBoard[row].length; i++) {\n      const cel = boardEl.rows[row].cells[i];\n      const val = curBoard[row][i];\n\n      if (val) {\n        cel.textContent = val;\n        cel.classList = 'field-cell';\n        cel.classList.add(`field-cell--${val}`);\n      } else {\n        cel.textContent = '';\n        cel.classList = 'field-cell';\n      }\n    }\n  }\n\n  scoreMax.textContent = String(game.getScoreMax());\n  scoreCur.textContent = String(game.getScore());\n\n  if (game.getStatus() === 'idle') {\n    startBt.className = 'button start';\n    startBt.textContent = 'Start';\n  } else {\n    startBt.className = 'button restart';\n    startBt.textContent = 'Restart';\n  }\n\n  switch (game.getStatus()) {\n    case 'playing':\n      [msgStartEl, msgWinEl, msgLoseEl].forEach(\n        (msg) =>\n          !msg?.classList.contains('hidden')\n            ? msg?.classList.add('hidden')\n            : '',\n        // eslint-disable-next-line function-paren-newline\n      );\n      break;\n\n    case 'idle':\n      msgStartEl?.classList.remove('hidden');\n      break;\n\n    case 'win':\n      msgWinEl?.classList.remove('hidden');\n      break;\n\n    case 'lose':\n      msgLoseEl?.classList.remove('hidden');\n      break;\n  }\n}\n\ndocument.addEventListener('keydown', (ev) => {\n  if (game.getStatus() === 'playing') {\n    game.moves(ev.key);\n  }\n  update();\n});\n\nstartBt?.addEventListener('click', (ev) => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n  } else {\n    game.restart();\n  }\n\n  update();\n});\n","'use strict';\n\nclass Game {\n  scoreMax = 0;\n\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = []) {\n    this.board = initialState ? [...this._getBlankBoard()] : initialState;\n    this.scoreCurrent = 0;\n    this.gameStatus = 'idle';\n  }\n\n  /**\n   * Generate blank board\n   * @returns blank board array\n   */\n  _getBlankBoard() {\n    return Array.from(\n      { length: 4 },\n      () => Array.from({ length: 4 }, () => 0),\n      // eslint-disable-next-line function-paren-newline\n    );\n  }\n\n  /**\n   * Innitiate game\n   */\n  _initialize() {\n    this.board = [...this._getBlankBoard()];\n    this._genRandCells();\n    this._genRandCells();\n  }\n\n  _clearBoard() {\n    this.board = this._getBlankBoard();\n  }\n  /**\n   * Generate 2 random tiles and populates the board\n   * @returns {undefined}\n   */\n  _genRandCells() {\n    const randTile = this._generateRandomTile(this.board);\n\n    if (!randTile) {\n      return;\n    }\n    this.board[randTile[0]][randTile[1]] = randTile[2];\n  }\n\n  /**\n   * Function generate random row and colum which is currently unpopulated\n   * Also return random number 2 or 4 with 4 (10% probability)\n   * @param {number[][]} boardArrs\n   * @returns [random row, random colum, random number]\n   */\n  _generateRandomTile(boardArrs) {\n    let randRow;\n    let randCol;\n\n    // Run this random generator until row and\n    // collum position in given board are zero(vacant)\n    do {\n      randRow = Math.floor(Math.random() * boardArrs.length);\n      randCol = Math.floor(Math.random() * boardArrs[0].length);\n    } while (boardArrs[randRow][randCol] !== 0);\n\n    // Add 2 or 4 with 4 10% probability\n    let randValue = 2;\n\n    if (Math.floor(Math.random() * 100 + 1) <= 10) {\n      randValue = 4;\n    }\n\n    return [randRow, randCol, randValue];\n  }\n\n  /**\n   * Check if can continue to play\n   * @returns true or false\n   * true- can continue the game\n   * false - stop the game (no moves, win or lose)\n   */\n  _checkGameStatus() {\n    // Check if winning score reached\n    if (this.board.some((row) => row.some((cell) => cell === 2048))) {\n      this.gameStatus = 'win';\n\n      return false;\n    }\n\n    // Check if less then 2 evaliable tiles exist on the board\n    const freeTiles = this.board.reduce(\n      (acc, cur) => acc + cur.filter((cell) => cell === 0).length,\n      0,\n    );\n\n    if (this._anyMovesLeft() === false && freeTiles === 0) {\n      this.gameStatus = 'lose';\n\n      return false;\n    }\n    this.gameStatus = 'playing';\n\n    return true;\n  }\n\n  _didTileMoved(newArr, oldArr) {\n    // Check if newArr same as board\n    for (let row = 0; row < oldArr.length; row++) {\n      for (let col = 0; col < oldArr[row].length; col++) {\n        if (oldArr[row][col] !== newArr[row][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  _anyMovesLeft() {\n    const posMoves = [\n      this._combineTiles('ArrowLeft', this.board)['score'],\n      this._combineTiles('ArrowRight', this.board)['score'],\n      this._combineTiles('ArrowUp', this.board)['score'],\n      this._combineTiles('ArrowDown', this.board)['score'],\n    ];\n\n    return posMoves.some((m) => m !== 0);\n  }\n\n  moves(direction) {\n    if (this.getStatus() === 'playing') {\n      const beforeMoveBoard = this._arrayDeepCopy(this.board);\n      const combBoard = this._combineTiles(direction, this.board);\n\n      this.board = this._arrayDeepCopy(combBoard['board']);\n      this.scoreCurrent += combBoard['score'];\n      this._updateMaxScore(this.scoreCurrent);\n\n      if (this._didTileMoved(beforeMoveBoard, this.board)) {\n        this._genRandCells();\n      }\n      this._checkGameStatus();\n    }\n  }\n\n  _shiftRight(arrN) {\n    const arr = [...arrN];\n\n    // Run for each row: filter-out Zeros appen zeroes from the left\n    for (let r = 0; r < arr.length; r++) {\n      const temp = arr[r].filter((e) => e);\n\n      arr[r] = Array.from(\n        { length: arr[r].length - temp.length },\n        () => 0,\n      ).concat(temp);\n    }\n\n    return arr;\n  }\n\n  _shiftLeft(arrN) {\n    const arr = [...arrN];\n\n    // Run for each row: filter-out Zeros appen zeroes from the right\n    for (let r = 0; r < arr.length; r++) {\n      const temp = arr[r].filter((e) => e);\n\n      arr[r] = temp.concat(\n        Array.from({ length: arr[r].length - temp.length }, () => 0),\n      );\n    }\n\n    return arr;\n  }\n\n  _transpose(arr) {\n    const temp = [];\n\n    for (let cols = 0; cols < arr.length; cols++) {\n      const tempCol = [];\n\n      for (let rows = 0; rows < arr[0].length; rows++) {\n        tempCol.push(arr[rows][cols]);\n      }\n      temp.push(tempCol);\n    }\n\n    return temp;\n  }\n\n  _combineTiles(direction, board) {\n    function combLeft() {\n      for (let row = 0; row < tempBoard.length; row++) {\n        for (let col = 0; col < tempBoard[row].length - 1; col++) {\n          const el = tempBoard[row][col];\n          const elRight = tempBoard[row][col + 1];\n\n          if (el && elRight && el === elRight) {\n            tempBoard[row][col] = el + elRight;\n            tempBoard[row][col + 1] = 0;\n            col++;\n            tempScore = el + elRight;\n          }\n        }\n      }\n    }\n\n    function combRight() {\n      for (let row = tempBoard.length - 1; row >= 0; row--) {\n        for (let col = tempBoard[row].length - 1; col >= 1; col--) {\n          const el = tempBoard[row][col];\n          const elLeft = tempBoard[row][col - 1];\n\n          if (el && elLeft && el === elLeft) {\n            tempBoard[row][col] = el + elLeft;\n            tempBoard[row][col - 1] = 0;\n            col--;\n            tempScore = el + elLeft;\n          }\n        }\n      }\n    }\n\n    let tempBoard = this._arrayDeepCopy(board);\n    let tempScore = 0;\n\n    switch (direction) {\n      case 'ArrowLeft':\n        tempBoard = this._shiftLeft(tempBoard);\n        combLeft();\n        tempBoard = this._shiftLeft(tempBoard);\n        break;\n\n      case 'ArrowRight':\n        tempBoard = this._shiftRight(tempBoard);\n        combRight();\n        tempBoard = this._shiftRight(tempBoard);\n        break;\n\n      case 'ArrowUp':\n        tempBoard = this._transpose(tempBoard);\n        tempBoard = this._shiftLeft(tempBoard);\n        combLeft();\n        tempBoard = this._shiftLeft(tempBoard);\n        tempBoard = this._transpose(tempBoard);\n        break;\n\n      case 'ArrowDown':\n        tempBoard = this._transpose(tempBoard);\n        tempBoard = this._shiftRight(tempBoard);\n        combLeft();\n        tempBoard = this._shiftRight(tempBoard);\n        tempBoard = this._transpose(tempBoard);\n        break;\n    }\n\n    return { board: tempBoard, score: tempScore };\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.scoreCurrent;\n  }\n\n  getScoreMax() {\n    return this.scoreMax;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  getBoard() {\n    return this.board;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.gameStatus = 'playing';\n    this._initialize();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.scoreCurrent = 0;\n    this.gameStatus = 'idle';\n    this._clearBoard();\n  }\n\n  _arrayDeepCopy(obj) {\n    if (typeof obj !== 'object' || obj === null) {\n      return obj;\n    }\n\n    if (obj instanceof Date) {\n      return new Date(obj.getTime());\n    }\n\n    if (obj instanceof Array) {\n      return obj.reduce((arr, item, i) => {\n        arr[i] = this._arrayDeepCopy(item);\n\n        return arr;\n      }, []);\n    }\n\n    if (obj instanceof Object) {\n      return Object.keys(obj).reduce((newObj, key) => {\n        newObj[key] = this._arrayDeepCopy(obj[key]);\n\n        return newObj;\n      }, {});\n    }\n  }\n\n  _updateMaxScore(curScore) {\n    if (this.scoreMax < curScore) {\n      this.scoreMax = curScore;\n    }\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$3d28d7f1aac198f5$exports","$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","protoProps","Game","key","initialState","arguments","instance","Constructor","defineProperty","value","enumerable","configurable","writable","obj","board","_getBlankBoard","scoreCurrent","gameStatus","_genRandCells","randTile","_generateRandomTile","boardArrs","randRow","Math","floor","random","randCol","randValue","some","row","cell","freeTiles","reduce","acc","cur","filter","_anyMovesLeft","newArr","oldArr","col","posMoves","_combineTiles","m","direction","getStatus","beforeMoveBoard","_arrayDeepCopy","combBoard","_updateMaxScore","_didTileMoved","_checkGameStatus","arrN","r","temp","e","concat","cols","tempCol","rows","push","combLeft","tempBoard","el","elRight","tempScore","_shiftLeft","_shiftRight","combRight","elLeft","_transpose","score","scoreMax","_initialize","_clearBoard","_this","Date","getTime","item","keys","newObj","curScore","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","$197cd56b15c33885$var$boardEl","document","querySelector","$197cd56b15c33885$var$startBt","$197cd56b15c33885$var$scoreCur","$197cd56b15c33885$var$scoreMax","$197cd56b15c33885$var$msgStartEl","$197cd56b15c33885$var$msgWinEl","$197cd56b15c33885$var$msgLoseEl","$197cd56b15c33885$var$game","$197cd56b15c33885$var$update","curBoard","getBoard","cel","cells","val","textContent","classList","add","String","getScoreMax","getScore","className","forEach","msg","contains","remove","addEventListener","ev","moves","start","restart"],"version":3,"file":"index.8ff22563.js.map"}